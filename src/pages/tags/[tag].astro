---
import BlogPost from "../../components/BlogPost.astro";
import BaseLayout from "../../layouts/BaseLayout.astro";

export async function getStaticPaths() {
  const allPosts = await Astro.glob("../posts/*.md");
  const uniqueTags = [
    ...new Set(allPosts.map(post => post.frontmatter.tags).flat())
  ];
  // what's happening on line 8:
  // for each post in array, map will naturally return an array of tags.
  // at the end of the iteration, map has a bunch of arrays.
  // before saving them all in allTags as an array of arrays, flatten the bunch of arrays.
  // so that there is only one outer array.
  // send this single array to Set to remove duplicates.
  // voila! you end up with a Set of unique tags.
  // however, what you need is an array of unique tags.
  // so use the spread operator. Or use Array.from(...) method.
  // Alternatively you can break down line 7 into multiple steps as follows
  // const allTags = allPosts.map(post => post.frontmatter.tags)
  // Array.from(new Set(allTags.flat())) or [...new Set(allTags.flat())]

  // A getStaticPaths function should always return a list of objects containing params (what to call each page route) and optionally any props (data that you want to pass to those pages).
  return uniqueTags.map(tag => {
    const filteredPosts = allPosts.filter(post =>
      post.frontmatter.tags.includes(tag)
    );
    return {
      params: { tag },
      props: {
        posts: filteredPosts
      }
    };
  });
}

const { tag } = Astro.params;
console.log(tag);
const { posts } = Astro.props;
---

<BaseLayout pageTitle={tag}>
  <p>Posts tagged with <em>{tag}</em></p>
  {
    posts.map(post => (
      <li>
        <BlogPost url={post.url} title={post.frontmatter.title} />{" "}
      </li>
    ))
  }
</BaseLayout>
